{"version":3,"sources":["serviceWorker.js","components/counter.jsx","components/counters.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Counter","console","log","this","props","counter","value","onClick","handleIncrement","className","id","onDecrement","onIncrement","renderBadgeClasses","formatCounterText","onDelete","badgeColor","Component","Counters","state","counters","handleDelete","counterId","countersAfterDelete","filter","e","setState","handleReset","countersToReset","map","c","index","indexOf","updateCounter","key","handleDecrement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oDCsCSC,E,uKArDJ,IAAD,OAER,OADAC,QAAQC,IAAI,QAASC,KAAKC,OACtBD,KAAKC,MAAMC,QAAQC,MAAQ,EAE7B,6BACC,6FACA,4BACCC,QAAS,kBAAM,EAAKC,mBACpBC,UAAU,gCAFX,MAUF,6BACC,wCAAcN,KAAKC,MAAMC,QAAQK,IACjC,4BACCH,QAAS,kBAAM,EAAKH,MAAMO,YAAY,EAAKP,MAAMC,UACjDI,UAAU,gCAFX,KAKA,4BACCF,QAAS,kBAAM,EAAKH,MAAMQ,YAAY,EAAKR,MAAMC,UACjDI,UAAU,gCAFX,KAKA,0BAAMA,UAAWN,KAAKU,sBACpBV,KAAKW,qBAEP,4BACCL,UAAU,wBACVF,QAAS,kBAAM,EAAKH,MAAMW,SAAS,EAAKX,MAAMC,QAAQK,MAFvD,a,2CAUF,IAAIM,EAAa,mBAGjB,OAFAA,GAA2C,IAA7Bb,KAAKC,MAAMC,QAAQC,MAAc,UAAY,Y,0CAKvC,IACZA,EAAUH,KAAKC,MAAMC,QAArBC,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GAlDVW,aCsDPC,E,4MAnDdC,MAAQ,CACPC,SAAU,CACT,CAAEV,GAAI,EAAGJ,MAAO,GAChB,CAAEI,GAAI,EAAGJ,MAAO,GAChB,CAAEI,GAAI,EAAGJ,MAAO,GAChB,CAAEI,GAAI,EAAGJ,MAAO,K,EAIlBe,aAAe,SAACC,GACfrB,QAAQC,IAAI,wCAAyCoB,GACrD,IAAMC,EAAsB,EAAKJ,MAAMC,SAASI,QAC/C,SAACC,GAAD,OAAOA,EAAEf,KAAOY,KAEjB,EAAKI,SAAS,CAAEN,SAAUG,K,EAE3BI,YAAc,WACb,IAAMC,EAAkB,EAAKT,MAAMC,SAASS,KAAI,SAACC,GAEhD,OADAA,EAAExB,MAAQ,EACHwB,KAER,EAAKJ,SAAS,CAAEN,SAAUQ,K,EAE3BpB,gBAAkB,SAACH,GAClB,IAAMe,EAAQ,YAAO,EAAKD,MAAMC,UAC1BW,EAAQX,EAASY,QAAQ3B,GAC/Be,EAASW,GAAT,eAAuB1B,GACvB,IAAM4B,EAAgBb,EAASW,GAAOzB,QACtC,EAAKoB,SAAS,CAAEN,SAAUa,K,uDAGjB,IAAD,OACR,OACC,6BACC,4BAAQxB,UAAU,yBAAyBF,QAASJ,KAAKwB,aAAzD,gBAGCxB,KAAKgB,MAAMC,SAASS,KAAI,SAACxB,GAAD,OACxB,kBAAC,EAAD,CACC6B,IAAK7B,EAAQK,GACbL,QAASA,EACTU,SAAU,EAAKM,aACfT,YAAa,EAAKJ,gBAClBG,YAAa,EAAKwB,0B,GA5CDlB,aCGvBmB,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SH4HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.d6fa3ab0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n\trender() {\n\t\tconsole.log(\"props\", this.props);\n\t\tif (this.props.counter.value < 0) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<p>Product has no valid quantity! Please add at least one product</p>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => this.handleIncrement()}\n\t\t\t\t\t\tclassName='btn btn-secondary m-2 btn-sm'>\n\t\t\t\t\t\t+\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h4>Counter #{this.props.counter.id}</h4>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => this.props.onDecrement(this.props.counter)}\n\t\t\t\t\tclassName='btn btn-secondary m-2 btn-sm'>\n\t\t\t\t\t-\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => this.props.onIncrement(this.props.counter)}\n\t\t\t\t\tclassName='btn btn-secondary m-2 btn-sm'>\n\t\t\t\t\t+\n\t\t\t\t</button>\n\t\t\t\t<span className={this.renderBadgeClasses()}>\n\t\t\t\t\t{this.formatCounterText()}\n\t\t\t\t</span>\n\t\t\t\t<button\n\t\t\t\t\tclassName='btn-danger btn-sm m-2'\n\t\t\t\t\tonClick={() => this.props.onDelete(this.props.counter.id)}>\n\t\t\t\t\tDelete\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trenderBadgeClasses() {\n\t\tlet badgeColor = \"badge m-2 badge-\";\n\t\tbadgeColor += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n\n\t\treturn badgeColor;\n\t}\n\n\tformatCounterText() {\n\t\tconst { value } = this.props.counter;\n\t\treturn value === 0 ? \"zero\" : value;\n\t}\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\n\nimport Counter from \"./counter.jsx\";\n\nclass Counters extends Component {\n\tstate = {\n\t\tcounters: [\n\t\t\t{ id: 1, value: 0 },\n\t\t\t{ id: 2, value: 0 },\n\t\t\t{ id: 3, value: 0 },\n\t\t\t{ id: 4, value: 0 }\n\t\t]\n\t};\n\n\thandleDelete = (counterId) => {\n\t\tconsole.log(\"response to event handleDelete called\", counterId);\n\t\tconst countersAfterDelete = this.state.counters.filter(\n\t\t\t(e) => e.id !== counterId\n\t\t);\n\t\tthis.setState({ counters: countersAfterDelete });\n\t};\n\thandleReset = () => {\n\t\tconst countersToReset = this.state.counters.map((c) => {\n\t\t\tc.value = 0;\n\t\t\treturn c;\n\t\t});\n\t\tthis.setState({ counters: countersToReset });\n\t};\n\thandleIncrement = (counter) => {\n\t\tconst counters = [...this.state.counters];\n\t\tconst index = counters.indexOf(counter);\n\t\tcounters[index] = { ...counter };\n\t\tconst updateCounter = counters[index].value++;\n\t\tthis.setState({ counters: updateCounter });\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button className='btn-primary btn-sm m-2' onClick={this.handleReset}>\n\t\t\t\t\tReset button\n\t\t\t\t</button>\n\t\t\t\t{this.state.counters.map((counter) => (\n\t\t\t\t\t<Counter\n\t\t\t\t\t\tkey={counter.id}\n\t\t\t\t\t\tcounter={counter}\n\t\t\t\t\t\tonDelete={this.handleDelete}\n\t\t\t\t\t\tonIncrement={this.handleIncrement}\n\t\t\t\t\t\tonDecrement={this.handleDecrement}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Counters;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counters from \"./components/counters.jsx\";\n\nReactDOM.render(<Counters />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}